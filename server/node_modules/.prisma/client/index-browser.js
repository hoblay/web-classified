
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.21.0
 * Query Engine version: e421996c87d5f3c8f7eeadd502d4ad402c89464d
 */
Prisma.prismaVersion = {
  client: "2.21.0",
  engine: "e421996c87d5f3c8f7eeadd502d4ad402c89464d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  phone: 'phone',
  countyId: 'countyId',
  zip: 'zip',
  isPrivacyEneable: 'isPrivacyEneable',
  role: 'role',
  languageId: 'languageId'
});

exports.Prisma.LanguageScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.CountyScalarFieldEnum = makeEnum({
  id: 'id',
  cityId: 'cityId',
  name: 'name'
});

exports.Prisma.CityScalarFieldEnum = makeEnum({
  id: 'id',
  stateId: 'stateId',
  name: 'name'
});

exports.Prisma.StateScalarFieldEnum = makeEnum({
  id: 'id',
  countryId: 'countryId',
  name: 'name'
});

exports.Prisma.CountryScalarFieldEnum = makeEnum({
  id: 'id',
  currencyId: 'currencyId',
  name: 'name'
});

exports.Prisma.CurrencyScalarFieldEnum = makeEnum({
  id: 'id',
  code: 'code',
  exchangeRate: 'exchangeRate'
});

exports.Prisma.PaymentScalarFieldEnum = makeEnum({
  id: 'id',
  currencyId: 'currencyId',
  method: 'method',
  status: 'status'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  parentId: 'parentId',
  name: 'name',
  maxImgs: 'maxImgs',
  postValidityIntervalInDays: 'postValidityIntervalInDays'
});

exports.Prisma.PropertyScalarFieldEnum = makeEnum({
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  unit: 'unit',
  isMandatory: 'isMandatory',
  screenControlId: 'screenControlId'
});

exports.Prisma.PossibleValuesScalarFieldEnum = makeEnum({
  id: 'id',
  propertyId: 'propertyId',
  value: 'value'
});

exports.Prisma.ScreenControlScalarFieldEnum = makeEnum({
  id: 'id',
  screenControl: 'screenControl'
});

exports.Prisma.PostScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  lastRenewedAt: 'lastRenewedAt',
  title: 'title',
  detail: 'detail',
  isActive: 'isActive',
  isSeller: 'isSeller',
  isIndividual: 'isIndividual',
  expectedPrice: 'expectedPrice',
  isPriceNegotiable: 'isPriceNegotiable'
});

exports.Prisma.ImageScalarFieldEnum = makeEnum({
  id: 'id',
  postId: 'postId',
  name: 'name',
  url: 'url'
});

exports.Prisma.AttributeScalarFieldEnum = makeEnum({
  id: 'id'
});

exports.Prisma.AttributeValuesScalarFieldEnum = makeEnum({
  id: 'id',
  attributeId: 'attributeId',
  value: 'value'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Role = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Language: 'Language',
  County: 'County',
  City: 'City',
  State: 'State',
  Country: 'Country',
  Currency: 'Currency',
  Payment: 'Payment',
  Category: 'Category',
  Property: 'Property',
  PossibleValues: 'PossibleValues',
  ScreenControl: 'ScreenControl',
  Post: 'Post',
  Image: 'Image',
  Attribute: 'Attribute',
  AttributeValues: 'AttributeValues'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
